With hce_orders AS (
         SELECT id                  AS order_id,
                event_name__c       AS order_event_name,         -- name of event (formula field in SF - pulls name field from event object) *
                contact_email__c   AS order_cnct_email,
                event_type__c       AS order_event_type,         -- type of event (formula field in SF - pulls usi_class field from event object) - used to determine IDC, CHarter,etc*
                event_market_code__c AS order_event_mkt_cd,
                event_port__c       AS order_event_port,         -- port for event (formula field in SF - pulls usi_category field from event object) *
                event_region__c     AS order_event_region,       -- region for event (formula field in SF - pulls region field from event object) *
                order_number__c     AS order_source_id,           -- order number (holds the order_number from the source transactional system and maps to either centaman_id or usi_id) *
                usi_id__c           AS order_helm_source_id,     -- helm order id (the helm external id - indexed and unique - order id within helm - have 10/ prefix) *
                usi_order_number__c AS order_number_helm_id,         -- order number generated by helm (most likely the order number w/o the 10/ prefix) *
                ordernumber         AS order_number_salesforce,  -- order number generated by SalesForce (system controlled and generated) *
                order_date__c       AS order_source_create_date, -- order date (date / time field - it should end at midnight - all dates stored as UTC) - order date counts as revenue date - (order/booking date) *
                order_date_fx__c    AS order_sf_create_date,       -- order date (date data type with no time component adds 1 day to the date to display correctly in SalesForce) - order date counts as revenue date *
                order_amount__c     AS order_total,              -- order total including tax and fees *
                sales_tax__c        AS order_sales_tax,          -- populated directly with the sales tax on the order (ticket price is subtotal, fees like a landing/service fee, sales tax based on what items are taxable, grand total) -- total minus the sales tax so subtotal + fees - Grand Total Including Tax (dawn estimates sales tax at 6%)
                fees__c             AS order_fees,               -- fees like landing/service fee
                order_before_tax__c AS order_before_tax,         -- subtotal + fees excluding sales tax
                product_order_amount_including_tax__c AS order_amount_including_tax, --rollup field in salesforce (aggregates values in child records - goes from the order object to the order item object and is looking at a field on order item object called total price including tax and adding that up)
                ordered_total__c    AS order_ordered_total, --  should be the same as the grand_total (order amount including tax and fees) -- may want to revisit
                payments__c         AS order_payments_c, -- sum of payments --- what people have paid for their order
                accountid           AS order_acct_id,         -- account id - fk way to connect to account table *
                billtocontactid     AS order_bill_to_contact_id, -- contact id - fk way to connect to contact table *
                eventid__c          AS order_event_id,           -- event id - fk way to connect to event table *
                bm_orderid__c       AS order_bytemark_id,        -- nyc ferry order id - way to identify if you NYCF customer *
                order_status__c     AS order_status,             -- order status (used for revenue) - true status - Canceled (X), Hold (H), Closed (C), Active (A) - Centaman the status can be whatever as its calculated - Active, Canceled, Hold. Helm statuses are Active, Closed, Hold, Canceled, Lost Sale *
                event_status__c     AS order_event_status,       -- event status (used for revenue) - Helm: long list, Centaman: Lost Sale, Confirmed *
                opportunityid       AS order_opportunity_id,      -- opportunity id - fk way to connect to the opportunity table *
                event_start_date_day_of_week__c AS order_event_start_day_of_week, -- day of the week the event started
                event_start_date_month__c AS order_event_start_date_month, -- formula that looks up the event start date and gets the month
                event_start_date_and_time__c AS order_event_start_date_and_time, -- formula that looks up the event object and copies it down to the order to make it easy to report on - redundant with the event object event_start_date_time
                event_anchor_venue__c AS order_event_anchor_evenue, -- looks up the event and copies the value of the USI anchor venue field - redundant by joining to the event object
                upper(trim(contact_first_name__c)) AS order_cnct_fname, -- redundant with contact object first name field
                upper(trim(contact_last_name__c)) AS order_cnct_lname, -- redundant with contact object last name field
                contactid__c         AS order_cnct_id, -- foreign key to the contact record but use bill to contact id
                description     AS order_description, -- order description - nothing coming from helm - some booking notes from centaman -- skip
                event_pier__c AS order_event_pier, -- redundant off of the events - field on events that is called event__c and this is just a formula that copies it down
                event_cruise_type__c as order_event_cruise_type, -- Type of Cruise, values include Dinner (D), Harbor Cruise (H), Cocktail (C), etc.
                ticket_count__c as order_passenger_count






    FROM customer_staging.sf_hce_order


),hce_accounts AS (
    SELECT
                id                             AS acct_id, -- account primary key *
               trim(usi_legalname__c) as acct_legal_name,
           concat(trim(usi_lastname__c) , ', ', trim(usi_firstname__c)) as acct_full_name,
           coalesce(upper(trim(name)),upper(trim(usi_name__c)))  As acct_name,



                usi_marketsegment__c    AS acct_mkt_segment,

                dunsnumber                      AS acct_company_DnB_number,
                ispersonaccount                 AS acct_isperson, -- Whether the account us for an Individual
                personhasoptedoutofemail        AS acct_email_DNC,
                usi_email__c                    AS acct_email,-- has over 600k records
                upper(trim(usi_state__c) )                   AS acct_state, -- redundant state value x transfer straight over from helm
                upper(trim(usi_company__c)  )                AS acct_company, -- redundant company name
                coalesce(phone, usi_phone__c)   AS acct_phone, -- business phone number
                persondonotcall                 AS acct_phone_DNC,
                upper(trim(billingcity) )                    AS acct_bill_city, -- business billing city is what we populate as primary address
                upper(trim(billingstate)  )                  AS acct_bill_state, -- business billing address --- these are the correct addresses to use
                upper(trim(billingstreet)   )                AS acct_bill_street, -- business billing street ---- anything in account object think of as an actual organization except for social accounts which are individual contacts where the same information can be found there -- in future its person account
                upper(trim(billingcountry)  )                AS acct_bill_country, -- billing country
                trim(billingpostalcode)              AS acct_bill_postal_cd, -- billing postal code
                website                         AS acct_website, -- website for the business
                usi_usertext02__c               AS acct_usertext02, -- just a referral code
                ownership                       AS acct_ownership, -- business ownership - picklist (public, private, subsidiary or other)
                industry                         AS acct_industry, -- out of box - probably skip
                naicsdesc                        AS acct_naicdesc, -- out of the box - probably skip
                sicdesc                          AS acct_sicdesc, -- out of the box - probably skip
                total_of_orders__c              AS acct_order_cnt
    FROM customer_staging.sf_hce_account

    ), hce_contact AS(
        SELECT
               id                                          AS cnct_id,           -- contact primary key *
                upper(trim(account_name__c)    )                        AS cnct_acct_name, -- account name for contact *
                upper(trim(full_name__c) )                              AS cnct_cust_fullname,    -- customers name *
               upper(trim(usi_company__c)  )                            AS cnct_company,
               ispersonaccount                            AS cnct_isperson, -- Whether or not this contact is a person
                upper(trim(name))                                       AS cnct_name, -- combination of the first name and last name (will be the same as full_name)
                upper(trim(firstname ) )                                AS cnct_fname, -- contact firstname
                upper(trim(lastname)  )                                 AS cnct_lname, -- contact lastname
                upper(trim(email)   )                                   AS cnct_email,        -- customers email *

                phone                                      AS cnct_phone, -- contact phone
                coalesce(usi_mobile__c,mobilephone)        AS cnct_mobile,
                upper(trim(mailingstate))                               AS cnct_mail_state, -- mailing address and a other address - the mailing address is for sending correspondence and the shipping address is a different address where you can ship big items
                upper(trim(mailingcity))                                AS cnct_mail_city, -- mailing address is the primary address -- mailing prefix are the primary
                upper(trim(mailingcountry))                             AS cnct_mail_country, -- primary mailing country
                upper(trim(mailingstreet))                              AS cnct_mail_street, -- primary mailing street
                upper(trim(mailingpostalcode))                         AS cnct_mail_postal_cd, -- primary mailing post code
                coalesce(usi_title__c,title)               AS cnct_title, -- Conctact's Organizational title for non individual contacts e.g. President. -- 100% Nulls
                usi_marketsegment__c                       AS cnct_mkt_segment, -- picklist that holds marketsegment major and minor
                usi_nickname__c                            AS cnct_usi_nickname, -- if name is robert and they go by bob
                usi_region__c                              AS cnct_region,
                usi_directmailoptin__c                     AS cnct_mail_optin,
                count_opps__c                              AS cnct_count_opps, -- a count of how many opportunities are related to that contact
                port__c                                    AS cnct_port, -- indicates port (SF, San Diego, NY) - could have a SD port - port is better on the order or event object
                hasoptedoutofemail                         AS cnct_email_DNC, -- email opt out flag - master flag - definitive
                event_order_count__c                       AS cnct_num_orders -- Number of orders associated with the Contact

         FROM customer_staging.sf_hce_contact

     ),
     hce_events AS (
         SELECT id                       AS event_id_pk,         -- event object primary key *
                name                    AS event_name,          -- event name - identical to event_name__c in order object *
                usi_class__c             AS event_type,          -- event type - CHRT, SIGHT, IDC, etc. *
                usi_type__c                AS event_detail,
                pier__c                  AS event_pier,
                market_codefx__c         AS event_market_code,   -- market code - it pulls the market segment from the account and contact records  (local corporate business, wedding shower, international, etc.) *
                region__c                AS event_region,        -- region where the event occurred *
                booking_type__c          AS event_booking_type,  -- booking type - type of cruise - a lot more specific than cruise type (baltimore dinner cruise) *
                cruise_type__c           AS event_cruise_type,   -- formula - type of cruise taken - holds values like brunch, dinner, cocktail, whale watching - from usi_rank from helm and from centaman *
                usi_startdate__c         AS event_start_date,    -- cruise date - no time stamp *
                event_start_date_time__c AS event_start_date_ts, -- cruise date - w/ time stamp *
                usi_status__c            AS event_status,        -- event status - list of helm (long list) and centaman statuses (confirmed or lost) *
                usi_id__c                AS event_usi_id,         -- helm id for that event record - allows you to locate the specific record in helm for that event (external - indexed and unique) *
                capacity__c              AS event_capacity,
                usi_public__c as event_is_public,
                usi_category__c as event_category

       FROM customer_staging.sf_hce_event__c

     ),
     event_orders AS (
         SELECT eventid__c            AS eo_event_id_fk,   -- event object foreign key *
                order_account_name__c AS eo_account_name,  -- account name (formula that pulls name from the account or contact object) *
                usi_id__c             AS eo_order_id,      -- helm order id (the helm external id - indexed and unique - order id within helm - have 10/ prefix) - no centaman equivalent *
                usi_event__c          AS eo_helm_event_id, -- the helm event id which you can also grab from the usi_id on the event object *
                order_date__c         AS eo_order_date,    -- booking date/order date - same thing - same order date in the order object *
                order_status__c       AS eo_order_status,  -- order status - same helm order statuses *
                ordered_total__c      AS eo_order_total    -- total including tax *

      FROM customer_staging.sf_hce_event_order__c


     ),

     hce_order_profile AS(
select
       order_id,
       acct_id,
       cnct_id,
       order_bill_to_contact_id,
       event_id_pk as event_id,
        event_name,
       order_sf_create_date as booking_date,
       extract (YEAR from order_sf_create_date) as booking_year,--Used for Revenue calculation not event Year
        extract(month from order_sf_create_date) as booking_month,
       order_before_tax as order_total_before_tax, -- order amount with fees
       order_amount_including_tax as order_total_including_tax,
       order_status,
       event_start_date_ts,

extract(YEAR from event_start_date_ts) as event_start_year,

       event_status,
       event_type,
       order_event_type,
       event_detail,
        event_is_public,
       event_category,
       event_cruise_type,
       order_event_port as event_port,
       event_pier,
       coalesce(order_event_mkt_cd,event_market_code) as event_market_cd,
       event_region,
        event_booking_type,


       cnct_isperson,
       acct_isperson,
       order_cnct_email,
  
                   case
                when
                    coalesce(order_cnct_email, acct_email, cnct_email)
                    like '%__@__%' then coalesce(order_cnct_email, acct_email, cnct_email) end
             as customer_email,
                          concat(coalesce(upper(order_cnct_lname),upper(cnct_lname))
             , ', ' , coalesce(upper(order_cnct_fname),upper(cnct_fname))) as contact_full_name,
                          upper(coalesce(acct_legal_name, acct_full_name)) as acct_legal_name,
            upper(coalesce(acct_name, cnct_name)) as customer_name,
             coalesce(acct_phone,cnct_phone) as customer_phone,
             coalesce(upper(acct_company) )as customer_company,
                      upper(concat( acct_bill_street , ';' , acct_bill_city , ';' , acct_bill_postal_cd , ';' , acct_bill_state , ';'  , acct_bill_country)) as acct_billing_address,
         upper(concat(cnct_mail_street  , ';' , cnct_mail_city , ';' , cnct_mail_postal_cd , ';' , cnct_mail_state , ';'
         , cnct_mail_country)) as cnct_mail_address,
--         lead_email,
--         lead_lname,
--         lead_fname,
--         lead_company,
--         lead_birthdate,
       cnct_email_DNC,
    
   
       acct_phone_DNC,
  
       acct_mkt_segment,
       cnct_mkt_segment,
       cnct_region,

        cnct_mail_optin,
       event_capacity,
       order_passenger_count
--         lead_campaign,
--         lead_event_size,
--         lead_phone

from hce_orders
    --inner join event_orders as eo on eo.eo_order_id = order_event_id
    inner join hce_events on hce_events.event_id_pk = order_event_id
left join hce_accounts on coalesce(hce_orders.order_bill_to_contact_id,hce_orders.order_acct_id) = hce_accounts.acct_id
left join hce_contact on hce_orders.order_cnct_id = hce_contact.cnct_id
--left join opportunities on hce_orders.order_opportunity_id=opportunities.opportunity_id
--left join hce_lead on hce_orders.order_opportunity_id = hce_lead.opportunity_id



    ),
     hce_customer_details AS (
         select
                CASE WHEN event_port like
                 '%Berkeley%' OR event_port like '%San Francisco%' OR event_port like '%San Diego%' OR event_port like '%Sacramento%' OR event_port like '%New York%' OR event_port like '%Marina%' OR event_port like '%Newport%' OR event_port like '%Long Beach%'-- Per Kayle
           THEN 'HCE Legacy'
           ELSE event_port END as Business_Unit,
customer_email,
contact_full_name,
acct_legal_name,
customer_name,
customer_phone,
customer_company,
 acct_billing_address,
cnct_mail_address,
            event_type,
                   event_detail,
        event_is_public,
       event_category,

                event_cruise_type,
           event_market_cd,
            acct_mkt_segment,
               --acct_subsegment,
           cnct_mkt_segment,
            null as hce_brand,
           --event_status,
           event_start_year as event_year,
            booking_year,
        extract(month from event_start_date_ts) as event_start_month,
DATE_TRUNC(DATE(booking_date),Month) as booking_month,
       DATE_TRUNC( DATE(event_start_date_ts),Month) as event_month,
                --order_source_create_date,
                --order_sf_create_date,
           event_port,
                event_pier,
                event_region,
                cnct_region,
                cnct_email_DNC,
acct_phone_DNC,
                cnct_mail_optin,
            --sum(event_capacity) as total_events_capacity,
            sum(order_passenger_count) as total_passengers,


                        count(order_id) as total_orders,
                          sum(order_total_before_tax) as cust_revenue_before_tax,
                        sum(order_total_including_tax)  as cust_revenue_including_taxes,
                        --min(order_source_create_date) as initial_source_order_date,
                         min (booking_date) as first_booking_date,
                        --max(order_source_create_date) as recent_source_order_date,
                        max (booking_date) as recent_booking_date,
                    DATE_DIFF(CURRENT_DATE() , DATE(max(booking_date)),day)        as recency,
           DATE_DIFF(CURRENT_DATE() , DATE(max(event_start_date_ts)),day)        as event_recency,         
       avg(order_total_before_tax) as average_cust_revenue
                --avg(cust_revenue_before_tax) over(partition by customer_email,contact_full_name,acct_legal_name order by cust_revenue_before_tax)as average_cust_revenue,
--PERCENTILE_CONT(order_total_before_tax,0.5 RESPECT NULLS) OVER(PARTITION BY Business_Unit,customer_email,contact_full_name,acct_billing_address)as median_cust_revenue


         from hce_order_profile
where event_status IN ('Closed (69)', 'Confirmed (40)', 'Retained Deposit (22)')
         group by 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30
         order by 16,17,1,3 desc
     ),Customer_Summary AS(


select
        Business_Unit,
          event_region,
       event_port,
       event_detail,

       event_category,
       event_type,

event_cruise_type,
    -- acct_mkt_segment,
event_is_public,


       event_month,
       --order_event_status,
       booking_month,
       cast(cast(sum(CASE WHEN customer_email IS NOT NULL THEN 1 ELSE 0 END)as float64)*100/
     sum(total_orders) as float64) as order_with_emails,
        cast(cast(sum(CASE WHEN customer_phone IS NOT NULL THEN 1 ELSE 0 END)as float64)*100/
        sum(total_orders) as float64)as order_with_phone,

        cast(cast(sum(CASE WHEN  acct_billing_address IS NOT NULL THEN 1 ELSE 0 END)as float64)*100/
        sum(total_orders) as float64) as order_with_acct_billing_add,

        cast(cast(sum(CASE WHEN cnct_mail_address IS NOT NULL THEN 1 ELSE 0 END)as float64)*100/
    sum(total_orders) as float64) as order_with_cnct_mail_add,

        cast(cast(sum(CASE WHEN customer_email IS NOT NULL AND customer_phone IS NOT NULL AND acct_billing_address IS NOT NULL AND cnct_mail_address IS NOT NULL THEN 1 ELSE 0 END)as float64)*100/
      sum(total_orders) as float64)as order_with_all_contacts,

       cast(cast(sum(CASE WHEN customer_email IS NOT NULL OR customer_phone IS NOT NULL OR acct_billing_address IS NOT NULL OR cnct_mail_address IS NOT NULL THEN 1 ELSE 0 END)as float64)*100/
      sum(total_orders) as float64)as order_with_any_contacts,

       cast(cast(sum(CASE WHEN acct_legal_name IS NOT NULL OR contact_full_name IS NOT NULL OR customer_name IS NOT NULL OR customer_company IS NOT NULL THEN 1 ELSE 0 END)as float64)*100/
    sum(total_orders) as float64) as order_with_any_name,

sum(total_passengers) as passengers,

       --sum(total_events_capacity) as capacity,
       sum(cust_revenue_before_tax) as cust_revenue_before_taxes,
       sum(cust_revenue_including_taxes) as revenue_with_taxes,
sum(total_orders) as total_orders,
        (cast(cast(sum(CASE WHEN total_orders > 1 and (customer_email is not null
                                OR customer_phone is not null
                                OR customer_name is not null
                                OR coalesce(acct_legal_name,contact_full_name) is not null
            OR coalesce(acct_billing_address,cnct_mail_address) is not null)
               THEN 1 else 0
           END) as float64
         )/sum (Case when  (customer_email is not null
                                OR customer_phone is not null
                                OR customer_name is not null
                                OR coalesce(acct_legal_name,contact_full_name) is not null
                                OR coalesce(acct_billing_address,cnct_mail_address) is not null

             ) THEN 1 end )as float64)*100 )
         as repeat_rate-- Calculated repeat rate
from hce_customer_details
--where event_status IN ('Closed (69)', 'Confirmed (40)', 'Retained Deposit (22)')
--and booking_year between 2018 and 2019
group by 1,2,3,4,5,6,7,8,9,10
order by 9,6,5,1,2,3,4 desc
)
select customer_email,
       customer_phone,
       coalesce(acct_legal_name,contact_full_name,customer_name,customer_company) as customer_name,
       customer_company,
coalesce(acct_billing_address,cnct_mail_address) as address,
coalesce(customer_email , customer_phone,customer_name , acct_billing_address,cnct_mail_address) as cust_natural_key,
case when acct_billing_address is null and cnct_mail_address is not null THEN 'MAIL'
WHEN acct_billing_address is not null and cnct_mail_address is null THEN 'BILLING'
WHEN acct_billing_address is not null and cnct_mail_address is not null THEN 'BOTH'
WHEN acct_billing_address is null and cnct_mail_address is null THEN 'NONE'
    END
AS address_type,
                 Business_Unit,
       event_port,
                event_pier,
                event_region,
                cnct_region,

            event_type,
                   event_detail,
        event_is_public,
       event_category,

                event_cruise_type,
           

            coalesce(event_market_cd,acct_mkt_segment,cnct_mkt_segment) as market_segment,
       --event_cruise_type,
               --acct_subsegment,
       event_month,
       
        cnct_email_DNC,
acct_phone_DNC,
                cnct_mail_optin,
       --order_event_status,
       booking_month,

       average_cust_revenue as cust_avg_revenue,
 EXTRACT(MONTH FROM event_month)
   as event_anniversay_month,
 
   PERCENTILE_CONT(cust_revenue_before_tax,0.5 RESPECT NULLS) OVER(PARTITION BY event_region,event_port,event_type)as median_cust_revenue,
   PERCENT_RANK() OVER (PARTITION BY event_region,event_port,event_type ORDER BY cust_revenue_before_tax,total_orders,recency) as segment_percent,
       -- median(cust_revenue_before_tax) over (partition by event_region,event_port) as port_median_cust_revenue,
       total_orders as total_customer_orders,
       sum(cust_revenue_before_tax) over (partition by event_region,event_port,event_type ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING) as port_total_pretax_revenue,
cust_revenue_before_tax as cust_pretax_revenue,
       sum(total_orders) over (partition by event_region,event_port,event_type ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING ) as total_port_orders,
  avg(cust_revenue_before_tax) over (partition by event_region,event_port,event_type ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING) as port_average_cust_revenue,
       --dense_rank()  over (partition by event_port ORDER BY cust_avg_revenue DESC,total_orders  DESC,recency ASC ) as RFM_rank,
       CASE WHEN recency is not null THEN
       PERCENT_RANK()  over (partition by event_port,event_type ORDER BY recency)  END as recency_rank,
       CASE WHEN total_orders is not null THEN
       PERCENT_RANK()  over (partition by event_port,event_type ORDER BY total_orders  DESC) END as order_rank,
       CASE WHEN cust_revenue_before_tax is not null THEN
        PERCENT_RANK()  over (partition by event_port,event_type ORDER BY cust_revenue_before_tax  DESC) END as revenue_rank,
       first_booking_date,
       recent_booking_date,
       recency,
event_recency,


       --row_number() over (partition by 3,1,2,4 order by 3,1,2,4) as cust_id

from  hce_customer_details

ORDER BY event_month,event_port
